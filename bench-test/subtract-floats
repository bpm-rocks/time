#!/usr/bin/env bash

# shellcheck disable=SC1091
. bpm
bpm::include bench
. ../libtime

allTests=(awk bc dc lua node perl php python ruby sqlite3 time::stampDiff)

test_awk() {
    awk "BEGIN{printf \"%.3f\", $2 - $1}"
}

# Digits trimmed only with division
test_bc() {
    echo "scale=3; ($2 - $1 + 0.0005)/1" | bc -l
}

# Digits trimmed only with division
test_dc() {
    echo "3 k $2 $1 - 0.0005 + 1 / p" | dc
}

test_lua() {
    lua -e "print(string.format('%.3f', $2 - $1))"
}

test_node() {
    node -pe "($2 - $1).toFixed(3)"
}

test_perl() {
    perl -E "printf('%.3f', $2 - $1)"
}

test_php() {
    php -r "echo round($2 - $1, 3);"
}

test_python() {
    python -c "print round($2 - $1, 3)"
}

test_ruby() {
    ruby -e "p ($2 - $1).round(3)"
}

test_sqlite3() {
    echo "select round($2 - $1, 3)" | sqlite3
}

test_time::stampDiff() {
    local x

    time::stampDiff x "$1" "$2"
    printf "%.3f" "$x"
}

timeStart=1551286158.022758000
timeEnd1=1551286161.638284000
timeEnd2=1551286161.639284000
echo "expected: 3.616 and 3.617 (round down, round up)"

for testName in "${allTests[@]}"; do
    if hash "$testName" &> /dev/null; then
        cmd1=("test_${testName}" "$timeStart" "$timeEnd1")
        cmd2=("test_${testName}" "$timeStart" "$timeEnd2")
        echo "$testName: $("${cmd1[@]}") $("${cmd2[@]}")"

        eval "bench::test::$testName() { test_$testName $timeStart $timeEnd2 > /dev/null; }"
    fi
done

bench::auto
